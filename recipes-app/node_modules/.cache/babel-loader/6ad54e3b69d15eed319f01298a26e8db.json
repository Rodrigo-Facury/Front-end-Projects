{"ast":null,"code":"var _jsxFileName = \"/home/rodrigo/Music/Trybe/projetos/sd-012-project-recipes-app/src/pages/Comidas.js\";\nimport React, { useEffect, useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport CategoryButton from '../components/CategoryButton';\nimport Header from '../components/Header';\nimport Footer from '../components/Footer';\nimport RecipeCard from '../components/RecipeCard';\nimport MyContext from '../context/MyContext';\nimport * as fetchAPI from '../service/fetchAPI';\n\nfunction Comidas(props) {\n  const {\n    history: {\n      location: {\n        pathname,\n        state\n      }\n    }\n  } = props;\n  const [foodRecipes, setFoodRecipes] = useState([]);\n  const [foodCategories, setFoodCategories] = useState([]);\n  const MAX_RECIPES = 12;\n  const MAX_CATEGORIES = 5;\n  const foodEndpoint = 'https://www.themealdb.com/api/json/v1/1/search.php?s=';\n  const foodCategoriesEndpoint = 'https://www.themealdb.com/api/json/v1/1/list.php?c=list';\n\n  const newFoodRecipes = data => {\n    setFoodRecipes(data);\n  };\n\n  const getAllFoods = () => {\n    if (!state) {\n      fetch(foodEndpoint).then(res => res.json()).then(({\n        meals\n      }) => setFoodRecipes(meals));\n    } else {\n      fetchAPI.filteredRecipes('ingredient', state.ingredient).then(meals => setFoodRecipes(meals));\n    }\n  };\n\n  useEffect(() => {\n    getAllFoods();\n    fetch(foodCategoriesEndpoint).then(res => res.json()).then(({\n      meals\n    }) => setFoodCategories(meals));\n  }, []);\n\n  const handleClick = ({\n    target\n  }) => {\n    if (target.className !== 'clicked') {\n      const URL = `https://www.themealdb.com/api/json/v1/1/filter.php?c=${target.innerText}`;\n      const allFilters = document.getElementsByName('category-filter');\n      fetch(URL).then(res => res.json()).then(({\n        meals\n      }) => setFoodRecipes(meals));\n      allFilters.forEach(filter => {\n        filter.className = '';\n      });\n      target.className = 'clicked';\n    } else {\n      getAllFoods();\n      target.className = '';\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(MyContext.Provider, {\n    value: newFoodRecipes,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Header, {\n    titulo: \"Comidas\",\n    showProfileIcon: \"sim\",\n    pathname: pathname,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 9\n    }\n  })), foodCategories.map(({\n    strCategory\n  }, index) => {\n    if (index < MAX_CATEGORIES) {\n      return /*#__PURE__*/React.createElement(CategoryButton, {\n        key: strCategory,\n        strCategory: strCategory,\n        handleClick: handleClick,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 13\n        }\n      });\n    }\n\n    return null;\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    \"data-testid\": \"All-category-filter\",\n    type: \"button\",\n    onClick: getAllFoods,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }\n  }, \"All\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"card-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }\n  }, foodRecipes.map(({\n    strMealThumb,\n    strMeal,\n    idMeal\n  }, index) => {\n    if (index < MAX_RECIPES) {\n      return /*#__PURE__*/React.createElement(Link, {\n        key: strMeal,\n        to: `/comidas/${idMeal}`,\n        className: \"card\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(RecipeCard, {\n        thumb: strMealThumb,\n        name: strMeal,\n        index: index,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 17\n        }\n      }));\n    }\n\n    return null;\n  })), /*#__PURE__*/React.createElement(Footer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 7\n    }\n  }));\n}\n\nComidas.propTypes = {\n  history: PropTypes.shape({\n    location: PropTypes.shape({\n      pathname: PropTypes.string\n    })\n  })\n}.isRequired;\nexport default Comidas;","map":{"version":3,"sources":["/home/rodrigo/Music/Trybe/projetos/sd-012-project-recipes-app/src/pages/Comidas.js"],"names":["React","useEffect","useState","Link","PropTypes","CategoryButton","Header","Footer","RecipeCard","MyContext","fetchAPI","Comidas","props","history","location","pathname","state","foodRecipes","setFoodRecipes","foodCategories","setFoodCategories","MAX_RECIPES","MAX_CATEGORIES","foodEndpoint","foodCategoriesEndpoint","newFoodRecipes","data","getAllFoods","fetch","then","res","json","meals","filteredRecipes","ingredient","handleClick","target","className","URL","innerText","allFilters","document","getElementsByName","forEach","filter","map","strCategory","index","strMealThumb","strMeal","idMeal","propTypes","shape","string","isRequired"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport CategoryButton from '../components/CategoryButton';\nimport Header from '../components/Header';\nimport Footer from '../components/Footer';\nimport RecipeCard from '../components/RecipeCard';\nimport MyContext from '../context/MyContext';\nimport * as fetchAPI from '../service/fetchAPI';\n\nfunction Comidas(props) {\n  const { history: { location: { pathname, state } } } = props;\n  const [foodRecipes, setFoodRecipes] = useState([]);\n  const [foodCategories, setFoodCategories] = useState([]);\n  const MAX_RECIPES = 12;\n  const MAX_CATEGORIES = 5;\n  const foodEndpoint = 'https://www.themealdb.com/api/json/v1/1/search.php?s=';\n  const foodCategoriesEndpoint = 'https://www.themealdb.com/api/json/v1/1/list.php?c=list';\n\n  const newFoodRecipes = (data) => {\n    setFoodRecipes(data);\n  };\n\n  const getAllFoods = () => {\n    if (!state) {\n      fetch(foodEndpoint)\n        .then((res) => res.json())\n        .then(({ meals }) => setFoodRecipes(meals));\n    } else {\n      fetchAPI.filteredRecipes('ingredient', state.ingredient)\n        .then((meals) => setFoodRecipes(meals));\n    }\n  };\n\n  useEffect(() => {\n    getAllFoods();\n\n    fetch(foodCategoriesEndpoint)\n      .then((res) => res.json())\n      .then(({ meals }) => setFoodCategories(meals));\n  }, []);\n\n  const handleClick = ({ target }) => {\n    if (target.className !== 'clicked') {\n      const URL = `https://www.themealdb.com/api/json/v1/1/filter.php?c=${target.innerText}`;\n      const allFilters = document.getElementsByName('category-filter');\n\n      fetch(URL)\n        .then((res) => res.json())\n        .then(({ meals }) => setFoodRecipes(meals));\n\n      allFilters.forEach((filter) => { filter.className = ''; });\n\n      target.className = 'clicked';\n    } else {\n      getAllFoods();\n      target.className = '';\n    }\n  };\n\n  return (\n    <div>\n      <MyContext.Provider value={ newFoodRecipes }>\n        <Header titulo=\"Comidas\" showProfileIcon=\"sim\" pathname={ pathname } />\n      </MyContext.Provider>\n      { foodCategories.map(({ strCategory }, index) => {\n        if (index < MAX_CATEGORIES) {\n          return (\n            <CategoryButton\n              key={ strCategory }\n              strCategory={ strCategory }\n              handleClick={ handleClick }\n            />\n          );\n        }\n        return null;\n      }) }\n      <button\n        data-testid=\"All-category-filter\"\n        type=\"button\"\n        onClick={ getAllFoods }\n      >\n        All\n      </button>\n      <div className=\"card-container\">\n        { foodRecipes.map(({ strMealThumb, strMeal, idMeal }, index) => {\n          if (index < MAX_RECIPES) {\n            return (\n              <Link key={ strMeal } to={ `/comidas/${idMeal}` } className=\"card\">\n                <RecipeCard\n                  thumb={ strMealThumb }\n                  name={ strMeal }\n                  index={ index }\n                />\n              </Link>\n            );\n          }\n          return null;\n        }) }\n      </div>\n      <Footer />\n    </div>\n  );\n}\n\nComidas.propTypes = {\n  history: PropTypes.shape({\n    location: PropTypes.shape({\n      pathname: PropTypes.string,\n    }),\n  }),\n}.isRequired;\n\nexport default Comidas;\n"]},"metadata":{},"sourceType":"module"}